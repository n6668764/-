#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>
#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"

#define TFT_SCLK  18  // 时钟引脚
#define TFT_MOSI  23  // 数据输出引脚
#define TFT_RST    4  // 复位引脚
#define TFT_DC   2   // 数据/命令选择引脚
#define TFT_CS    5   // 片选引脚

#define TFT_WIDTH  160
#define TFT_HEIGHT 128

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_SCLK, TFT_MOSI, TFT_RST); 

const int ecgPin = 34; // AD8232模拟输入引脚

unsigned long lastRPeakTime = 0; // 上一个R波峰值时间
unsigned long totalRRInterval = 0; // 所有R-R间隔时间的累加值
unsigned int numRPeaks = 0; // R波的数量
int heartRate = 0; // 心率

// 低通滤波器参数
const float alpha = 0.9;
static int lastFilteredValue = 0;

// R波检测参数
#define R_PEAK_THRESHOLD 2300 // R波峰值的阈值
#define RPeakInterval 500 // R波间隔，单位毫秒

MAX30105 particleSensor;

uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
int32_t bufferLength = 100; //data length
int32_t spo2; //SPO2 value
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid

// Task handles
TaskHandle_t taskHeartRateHandle;
TaskHandle_t taskSpo2Handle;

// Semaphore handles
SemaphoreHandle_t screenMutex;
SemaphoreHandle_t i2cMutex;

// Function prototypes
void taskHeartRate(void *parameter);
void taskSpo2(void *parameter);
void drawECGWaveform(int value);
int lowPassFilter(int value);
void detectRPeak(int value);
void calculateHeartRate();
void drawMonitorScreen();

void setup() {
  Serial.begin(115200);
  
  tft.initR(INITR_BLACKTAB);
  tft.fillScreen(ST77XX_BLACK);
  tft.setRotation(1);

  // Draw monitor screen
  drawMonitorScreen();

  screenMutex = xSemaphoreCreateMutex();  // 创建互斥量
  i2cMutex = xSemaphoreCreateMutex();    // 创建 I2C 互斥量
  
  if (!particleSensor.begin(Wire, I2C_SPEED_STANDARD)) {
    Serial.println(F("MAX30102 was not found. Please check wiring/power."));
    while (1);
  }
  byte ledBrightness = 60; 
  byte sampleAverage = 4;
  byte ledMode = 2;
  byte sampleRate = 200;
  int pulseWidth = 411;
  int adcRange = 4096;
  
  // Configure sensor
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);

  // Create heart rate task and bind it to core 1
  xTaskCreatePinnedToCore(
    taskHeartRate,            
    "HeartRateTask",          
    10000,                    
    NULL,                     
    1,                        
    &taskHeartRateHandle,     
    1);                       

  // Create SpO2 task and bind it to core 0
  xTaskCreatePinnedToCore(
    taskSpo2,                 
    "SpO2Task",               
    10000,                    
    NULL,                     
    1,                        
    &taskSpo2Handle,          
    0);                       
}

void loop() {
  // Nothing to do here
}

void taskHeartRate(void *parameter) {
  int ecgValue;
  int filteredValue;

  for (;;) {
    ecgValue = analogRead(ecgPin);
    filteredValue = lowPassFilter(ecgValue);
    drawECGWaveform(filteredValue);
    detectRPeak(filteredValue);
    calculateHeartRate();

    // 在更新屏幕时加锁
    if (xSemaphoreTake(screenMutex, portMAX_DELAY) == pdTRUE) {
      calculateHeartRate();  // 更新心率显示
      xSemaphoreGive(screenMutex);  // 释放锁
    }

    vTaskDelay(pdMS_TO_TICKS(10)); // Delay for 10 milliseconds
  }
}

void taskSpo2(void *parameter) {
  for (;;) {
    // 在I2C总线读取时加锁
    if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
      for (byte i = 0; i < bufferLength; i++) {
        while (!particleSensor.available())
          particleSensor.check();

        redBuffer[i] = particleSensor.getRed();
        irBuffer[i] = particleSensor.getIR();
        particleSensor.nextSample();
      }
      xSemaphoreGive(i2cMutex);  // 释放 I2C 互斥量
    }

    int32_t localSpo2;
    int8_t localValidSPO2;
    int32_t heartRate;
    int8_t validHeartRate;

    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &localSpo2, &localValidSPO2, &heartRate, &validHeartRate);

    // 在更新屏幕时加锁
    if (xSemaphoreTake(screenMutex, portMAX_DELAY) == pdTRUE) {
      tft.setTextSize(1);
      tft.setCursor(60, 20);
      tft.setTextColor(ST77XX_WHITE);
      tft.print(localSpo2);  // 更新 SpO2 显示
      xSemaphoreGive(screenMutex);  // 释放锁
    }

    vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1 second
  }
}

void drawECGWaveform(int value) {
  static int xPos = 0;
  static int lastValue = TFT_HEIGHT / 3;

  int yPos = map(value, 0, 4095, TFT_HEIGHT, 50);

  tft.drawLine(xPos, lastValue, xPos + 1, yPos, ST77XX_WHITE);

  xPos++;
  if (xPos >= TFT_WIDTH) {
    xPos = 0;
    tft.fillRect(0, TFT_HEIGHT / 3, TFT_WIDTH, TFT_HEIGHT * 2 / 3, ST77XX_BLACK);
  }
  lastValue = yPos;
}

int lowPassFilter(int value) {
  int filteredValue = alpha * value + (1 - alpha) * lastFilteredValue;
  lastFilteredValue = filteredValue;
  return filteredValue;
}

void detectRPeak(int value) {
  if (value > R_PEAK_THRESHOLD) {
    unsigned long currentTime = millis();
    unsigned long timeSinceLastRPeak = currentTime - lastRPeakTime;
    if (timeSinceLastRPeak > RPeakInterval) {
      totalRRInterval += timeSinceLastRPeak;
      numRPeaks++;
      lastRPeakTime = currentTime;
    }
  }
}

void calculateHeartRate() {
  if (numRPeaks > 0) {
    unsigned long averageRRInterval = totalRRInterval / numRPeaks;
    heartRate = 60000 / averageRRInterval;
  } else {
    heartRate = 0;
  }
   
  tft.fillRect(10, 20, 20, 10, ST77XX_BLACK);
  tft.setTextSize(1);
  tft.setCursor(10, 20);
  tft.setTextColor(ST77XX_WHITE);
  tft.print(heartRate);
}

void drawMonitorScreen() {
  tft.drawRect(0, 0, 50, 40, ST77XX_WHITE);
  tft.drawRect(50, 0, 50, 40, ST77XX_WHITE);
  tft.drawRect(100, 0, 60, 40, ST77XX_WHITE);
  tft.setTextSize(1);
  tft.setCursor(2, 10);
  tft.setTextColor(ST77XX_WHITE);
  tft.print(" bpm");
  tft.setCursor(50, 10);
  tft.setTextColor(ST77XX_WHITE);
  tft.print(" spo2");
}
